name: Set Stable Tag

on: workflow_dispatch

jobs:
  #reusing existing workflow to run e2e tests, but on the marketplace version
  e2e-tests-on-marketplace-version:
    if: false
    uses: ./.github/workflows/product-creation-tests.yml
    with:
      use-marketplace-version: true

  set-stable-tag:
    runs-on: ubuntu-latest
    if: false
    environment: Deployment
    steps:
      - uses: actions/checkout@v4

      - name: Fail if not on a release publish branch
        run: |
          echo "Current ref: ${{ github.ref }}"
          BRANCH="${{ github.ref }}"
          if [[ ! $BRANCH == refs/heads/release/*/publish ]]; then
            echo "❌ This workflow can only be run on release/*/publish branches."
            exit 1
          fi

      - name: Get NPM Version
        id: package-version
        uses: martinbeentjes/npm-get-version-action@v1.3.1

      - name: Validate Git tag
        run: |
          git fetch --tags
          if [ ! $(git tag -l "v${{ steps.package-version.outputs.current-version}}") ]; then
            echo "❌ Git tag does not exist" 1>&2
            exit 1
          fi

      - name: Install SVN
        run: sudo apt-get install subversion -y

      - name: Checkout SVN Repository
        run: svn co https://plugins.svn.wordpress.org/facebook-for-woocommerce/ woocommerce_svn --quiet --non-interactive

      - name: Validate SVN tag
        run: |
          if [ ! -d "woocommerce_svn/tags/${{ steps.package-version.outputs.current-version}}" ]; then
            echo "❌ SVN tag directory does not exist" 1>&2
            exit 1
          fi

      - name: Update readme.txt
        env:
          NEW_VERSION: ${{ steps.package-version.outputs.current-version}}
        run: |
          cd woocommerce_svn
          sed -i -E "s/^(Stable tag:)[[:space:]]*[0-9.]+/\1 $NEW_VERSION/" "trunk/readme.txt"

      - name: Commit to SVN
        env:
          SVN_USERNAME: ${{ secrets.SVN_USERNAME }}
          SVN_PASSWORD: ${{ secrets.SVN_PASSWORD }}
        run: |
          cd woocommerce_svn
          cat trunk/readme.txt
          svn status
          svn diff
          svn commit -m "Update stable tag for version ${{ steps.package-version.outputs.current-version}}" --username "$SVN_USERNAME" --password "$SVN_PASSWORD" --no-auth-cache --non-interactive

  set-last-release-as-latest:
    runs-on: ubuntu-latest
    environment: Deployment
    # needs: set-stable-tag
    steps:
      - uses: actions/checkout@v4

      - name: get npm version
        id: package-version
        uses: martinbeentjes/npm-get-version-action@v1.3.1

      - name: Install Github CLI
        run: |
          # Install GitHub CLI
          curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
          echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
          sudo apt update
          sudo apt install gh

           # Authenticate with GitHub CLI
          gh auth login --with-token <<< "${{ secrets.GITHUB_TOKEN }}"

      - name: get release by tag
        id: get-release-by-tag
        run: |
          version="${{ steps.package-version.outputs.current-version }}"

          # Get release ID by tag
          echo "Fetching release for tag v${version}..."
          release_data=$(gh api \
            -H "Accept: application/vnd.github+json" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            "/repos/${{ github.repository }}/releases/tags/v${version}" || echo '{"message":"Not Found"}')

          if echo "$release_data" | grep -q '"message":"Not Found"'; then
            echo "❌ Release with tag v${version} not found"
            exit 1
          fi

          release_id=$(echo "$release_data" | jq -r '.id')
          echo "✅ Found release ID: $release_id"
          echo "release_id=$release_id" >> $GITHUB_OUTPUT

      - name: Set release as latest
        if: steps.get-release-by-tag.outputs.release_id != ''
        run: |
          version="${{ steps.package-version.outputs.current-version }}"
          release_id="${{ steps.get-release-by-tag.outputs.release_id }}"

          # Update release to make it latest
          echo "Setting release v${version} as latest..."
          update_response=$(gh api \
            --method PATCH \
            -H "Accept: application/vnd.github+json" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            "/repos/${{ github.repository }}/releases/${release_id}" \
            -f "make_latest=true" || echo '{"message":"Error"}')

          if echo "$update_response" | grep -q '"message":"Error"'; then
            echo "❌ Failed to update release v${version} as latest"
            exit 1
          fi

          echo "✅ Release v${version} set as latest"
